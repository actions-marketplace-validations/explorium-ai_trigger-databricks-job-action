name: Trigger Databricks Job
description: Trigger a Databricks Workflow Job
branding:
  icon: hard-drive
  color: blue
inputs:
  token:
    description: Databricks Authentication Token
    required: true
  host:
    description: Databricks Host URL
    required: true
  job-id:
    description: Databricks Workflow Job ID
    required: true      
  payload:
    description: the directory path to the specified chart
    default: '{}'
    required: false
runs:
  using: "composite"
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4.5.0

    - name: install-databricks-cli
      uses: microsoft/install-databricks-cli@v1.0.0

    - name: 'Setup jq'
      uses: dcarbone/install-jq-action@v1.0.1

    - name: Run Databricks Job
      id: trigger
      shell: python
      run: |
        import requests
        import json
        import os
        api_url = "${{ inputs.host }}/api/2.0/jobs/run-now"
        api_token = "${{ inputs.token }}"
        headers = {
            "Authorization": "Bearer " + api_token,
            "Content-Type": "application/json"
        }
        payload = {
            "job_id": "${{ inputs.job-id }}",
            "notebook_params": ${{ inputs.payload }}
        }
        response = requests.post(api_url, headers=headers, json=payload)
        if response.status_code == 200:
            run_id = response.json()["run_id"]
            with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                print(f'run_id={run_id}', file=fh)
        else:
            raise Exception(f"Failed to trigger the job: {response.text}")

    - name: Wait for Databricks Job to Complete
      shell: bash
      env:
        DATABRICKS_HOST: ${{ inputs.host }}
        DATABRICKS_TOKEN: ${{ inputs.token }}
      run: |
        status_run=$(databricks runs get --run-id ${{ steps.trigger.outputs.run_id }} | jq -r '.state.life_cycle_state')
        echo "Job status: $status_run"
        while [ "$status_run" == "RUNNING" || "$status_run" == "PENDING" ]; do
          status_run=$(databricks runs get --run-id ${{ steps.trigger.outputs.run_id }} | jq -r '.state.life_cycle_state')
          echo "Job status: $status_run"
          sleep 10
        done
        result_run=$(databricks runs get --run-id ${{ steps.trigger.outputs.run_id }} | jq -r '.state.result_state')
        echo "Job result: $result_run"
        if [ "$result_run" = "SUCCESS" ]; then
          echo "Job succeeded"
          exit 0
        else
          echo "Job failed"
          exit 1
        fi
